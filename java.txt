JAVA

intelliJ 단축키 :
sout : System.out.printIn();이 기본으로 생성됨
soutm : System.out.printIn(Class.method); 클래스명.메소드명 출력
soutp : System.out.printIn("parameter="+parameter); 입력받은 파라미터들 출력
soutv : System.out.printIn("value="+value); 메소드 내에서 사용 가능한 변수 출력

JAVA : 
자바의 첫번째 큰 특징은 플랫폼(OS)독립적인 개발이 가능하다는 것. 
두번째 큰 특징으로는 자동으로 메모리를 관리해준다는 것

JVM : 자바 가상 머신(Java Virtual Machine)
JDK : 자바의 개발환경으로 JDK의 내부에 JRE가 들어있음.
JRE : 자바의 실행환경으로 JRE의 내부에 JVM가 들어있음.
JDK > JRE > JVM

JVM이 있음으로써 OS에 상관없이 독립적으로 실행할 수 있음.
(ex: 각 OS환경에 맞게 설치된 JDK을 실행할 경우 어떠한 OS에서 개발된 Java라 하더라도 각OS(window, Mac, Linux)에서 실행가능)

byte code → JVM → .exe
.class(중간어 코드) : 확장자가 .class인 코드는 byte code코드로 만들어져있다.
특정OS에서 java를 개발하면 byte code코드로 만들어진다.
확장자가.java인 코드를 컴파일을 하게 되면 어떠한 OS에서 실행될지 모르기 때문에 .exe코드로 만들지 못하고 .class(중간어 코드)로 만들어진다.
JVM은 [1차] 컴파일된 byte code(.class)를 OS에 맞게 한번 더 [2차]컴파일하여 메모리(.exe)에 로딩하여 실행한다.
c:₩>java.exe HelloWorld:실행
 → RPC(원격 프로세서 호출): JVM동작

JVM의 memory model(Runtime Data Area)
Thread
1. Method Area
2. Heap Area Generation
3. Stack Area(Call Stack Frame Area) PC register Native Method Area
4. Runtime Constant Pool(Literal Pool)

Java에서 컴파일 명령어와 실행 명령어 : javac.exe(컴파일), java.exe(실행)

객체지향 프로그래밍 언어란? 클래스 단위로 프로그래밍하는 것

JavaSE프로그램의 기본 틀
public class Hello {
  public static void main(String[] args) {
  }
}

객체지향 프로그램에서 클래스 안에 특정 기능(동작)을 처리하는 함수를 무엇이라고 하는가?
method(메서드)

JavaSE프로그램에서 프로그램의 진입점(시작점)이며 가장 먼저 실행되는 메서드의 이름은?
main

JVM(Java Virtual Machine)란 무엇인가?
자바 프로그램을 구동해주는 프로세서(엔진)

프로그래밍의 3대요소 : 변수(Variable), 자료형(Datatype), 할당(Assign)
변수 : 데이터를 저장하는 메모리 공간의 이름(symbol),기억공간
자료형 : 변수의 크기와 어떤 종류의 데이터를 저장할 것인지를 결정하는 것,변수 안에 넣을 데이터의 종류
할당 : 변수에 데이터를 저장하는 것
변수선언(변수 + 자료형) : 변수선언을 하면 기억 공간이 만들어진다.
변수와 자료형이 만나면 「변수선언」이라고 함 (ex : int a;)
어떤 종류의 데이터를 넣어줄 것인지 지정(변수선언)하고 데이터를 넣어주는 것이  「변수할당」
초기화 : 변수 선언과 동시에 할당을 할 경우 「초기화가 되었다」고 함(ex : int a = 10;)
변수 선언과 동시에 할당이 이루어지지 않았을 경우 「초기화가 되지 않았다」고 함( int a;)
심볼테이블(symbol table) : 변수를 관리하는 테이블

변수의 종류
인스턴스 변수(멤버변수,instance variable)
스태틱 변수(클래스변수,static variable)
지역변수(local variable)
매개변수(parameter, argument)

변수를 만들기 위해 고려해야하는 자료형의 종류
기본자료형(Primitive Data Type,PDT) : 프로그램에서 기본적으로 제공해주는 자료형
사용자정의자료형(User Define Data Type,UDDT) : 사용자가 만들어서 사용하는 자료형
int,float,char,boolean → 기본자료형
String,Book,Movie,Member → 사용자 정의 자료형(User Define Data Type,UDDT),첫글자가 대문자

Data Type |	크기	| 데이터(종류) |	Default Value(for fields)
byte	| 1byte |	정수 |	0
short	| 2byte |	정수 |	0
int	| 4byte |	정수 |	0
long	| 8byte |	정수 |	0L
float	| 4byte |	실수 |	0.0f
double	| 8byte |	실수 |	0.0d
char	| 2byte |	문자 |	\u0000,null
boolean	| 1byte |	참,거짓 |	true, false

기본 자료형(PDT)의 종류
종류/크기 | 1byte | 2byte | 4byte | 8byte
논리형   | boolean |     |       |
문자형   |       | char  |       |
정수형   | byte  | short | int   | long
실수형   |       |       | float | double

byte : -2⁷(-128)~2⁷-1(127)
MSB : 0(양수),1(음수)
short : -2¹⁵(-32,768)~2¹⁵-1(32,767)
char : 0~2¹⁶-1(0~65,535)
int(정수형의 표준) : -2³¹(-2,147,483,648)~231-1(2,147,483,647)
long : -2⁶³(-9,223,372,036,854,775,808)~2⁶³-1(9,223,372,036,854,775,807)
*floating point(부동소수점/浮動小數點) : float, double
float : 4byte(exponent(지수),fraction/mantissa(가수))
double(실수형의 표준) : 8byte

API : 만들어진 자료형(객체자료형)
객체지향 : 필요한 API를 언제든지 가져와서 원하는 것들을 만들 수 있음

변수 선언 → 자료형(크기, 종류) + 변수 ; → int a;
변수 할당(=) → L-Value = R-Value; → 변수에 지정된 데이터타입에 맞게 데이터를 저장(대입)하는 행위
L-Value → 변수
R-Value → int a = 10; // 10 상수
          int b = a; // a 변수
          int c = b*10; // b*10 연산식
          int d = event(c); // event(c) 메소드 호출문
int a; a = 10; 선언 + 할당
int a = 10; 선언 + 초기화

지역변수는 반드시 초기화를 해서 사용해야함(main 등의 메소드(block) 안에 선언된 변수)

symbol table(심볼테이블) : 변수를 관리하는 테이블로 변수가 만들어지면 변수를 관리하는 테이블(symbol table)에 변수 정보가 저장된다.
변수 정보 : 심볼테이블에 변수의 이름과 위치가 저장됨
hash table(해쉬테이블) : 검색을 빠르게 하기 위해 만들어진 테이블로 symbol table는 hash table로 내부적으로 만들어져서 구현을 함

2⁷|2⁶|2⁵|2⁴|2³|2²|2¹|2⁰ ← weight
  |64|32|16|8 |4 |2 |1
2진수 → (01000101)₂
8진수 → (105)₈
10진수 → (69)₁₀
16진수 → 0x45 → (45)₁₆
2진수 3자리 = 8진수의 1자리
2진수 4자리 = 16진수의 1자리

프로그래밍에서 2진수를 표현할 때는 0b를 앞에 붙임 0b01000101

ASCII CODE : 아스키코드는 1바이트(128개)의 문자를 표현 할 수 있음(2⁷ᵇⁱᵗ=¹²⁸) → 0부터127까지
Unicode(UTF-8) : 유니코드는 2바이트(65,536)개의 문자를 표현 할 수 있음(2¹⁶ᵇⁱᵗ=⁶⁵’⁵³⁶) → 0부터65,535까지
'\u숫자' → 역슬래시 + u + 16진수 = 유니코드표현

대문자(A)와 소문자(a)의 차이값= 32
A = 65
a = 97
'a'-32='A'
'A'+32='a'

Casting(형변환)
Data Type(값의 타입)을 다른 타입으로 변환하는 것
* 자동형변환(묵시적) : small type → big type(byte → int)
* 강제형변환(명시적) : big type → small type(int → byte,손실발생)
* 강제형변환 : 타입을 강제로 맞춰야 한다.
* boolean type는 형변환이 안된다.

int(4byte) → char(2byte) = (char)65 → 'A'
char(2byte) → int(4byte) = (int)'A' → 65
float(4byte) → int(4byte) = (int)2.6f → 2(손실됨)
int(4byte) → float(4byte) = (float)10 → 10.0f